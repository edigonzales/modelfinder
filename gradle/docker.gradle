tasks.register('copyNativeImage', Copy) {
    //dependsOn 'nativeCompile'
    from file("$buildDir/native/nativeCompile/kartenkatalog")
    into file("$projectDir/docker/image/tmp")
}

// tasks.register('buildNativeDockerImage', Exec) {
//     dependsOn 'copyNativeImage'
//     def githash = getCheckedOutGitCommitHash()
//     def build_timestamp = getTimestamp()

//     workingDir "$projectDir/docker/image"
//     commandLine 'docker', 'build',
//                 '--no-cache', '--force-rm',
//                 '-t', "sogis/datahub:latest",
//                 '-f', 'Dockerfile.alpine',  '.'
// }

// Wird sich noch Ã¤ndern, wenn wir JVM-Image herstellen
// und Docker-Image testen wollen.

tasks.register('buildNativeDockerImage', Exec) {
    dependsOn 'copyNativeImage'
    def githash = getCheckedOutGitCommitHash()
    def build_timestamp = getTimestamp()

    // TODO add ghcr.io 
    workingDir "$projectDir/docker/image"
    commandLine 'docker', 'buildx', 'build',
                '--platform', 'linux/amd64',
                '-t', "sogis/modelfinder:$version.major",
                '-t', "sogis/modelfinder:$version.major.$version.minor",
                '-t', "sogis/modelfinder:$version.major.$version.minor.$version.build",
                '-t', "sogis/modelfinder",
                '--label', "modelfinder.created=$build_timestamp", 
                '--label', "modelfinder.git_commit=$githash",
                '--label', "modelfinder.version=$version",
                //'-f', 'Dockerfile.native',  '.', '--push'
                '-f', 'Dockerfile.native',  '.'
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}